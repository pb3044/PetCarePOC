using AraInvoice.Common.Models;
using AraInvoice.Data;
using Microsoft.AspNetCore.Mvc;
using Microsoft.DotNet.Scaffolding.Shared;
using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;
using System.Collections.Generic;
using System.Linq;
using Document = QuestPDF.Fluent.Document;

namespace AraInvoice.Web
{
    public class GenerateInvoice
    {
        public static void GeneratePdf(string logoPath, string filePath, InvoiceVM invoice)
        {
            var document = CreateInvoiceDocument(logoPath, invoice);
            document.GeneratePdf(filePath);
        }

        private static Document CreateInvoiceDocument(string logoPath, InvoiceVM invoice)
        {
            QuestPDF.Settings.License = LicenseType.Community;
            var totals = CalculateInvoiceTotals(invoice.InvoiceItems);

            return Document.Create(container =>
            {
                container.Page(page =>
                {
                    page.Size(PageSizes.A4);
                    page.Margin(30);
                    page.DefaultTextStyle(x => x.FontSize(10));

                    // Header section
                    page.Header().Element(header => ComposeHeader(header, logoPath, invoice));

                    // Content section
                    page.Content().PaddingVertical(15).Element(content => ComposeContent(content, invoice, totals));

                    // Footer section
                    page.Footer().AlignCenter().Text("THANK YOU FOR YOUR BUSINESS!").FontSize(10).Bold();
                });
            });
        }

        private static (float TotalHST, float TotalFuelSurcharge, float Subtotal, float GrandTotal) CalculateInvoiceTotals(IEnumerable<InvoiceItemVM> items)
        {
            float totalHst = 0, totalFuelSurcharge = 0, subtotal = 0, grandTotal = 0;

            foreach (var item in items)
            {
                float hst = item.HST;
                float fuel = item.FuelSurcharge;
                float lineTotal = item.LineTotal;
                float totalCost = lineTotal + hst + fuel;

                totalHst += hst;
                totalFuelSurcharge += fuel;
                subtotal += lineTotal;
                grandTotal += totalCost;
            }

            return (totalHst, totalFuelSurcharge, subtotal, grandTotal);
        }

        //private static void ComposeHeader(IContainer container, string logoPath, InvoiceVM invoice)
        //{
        //    container.Column(header =>
        //    {
        //        // Top section with logo, company info, and invoice title
        //        header.Item().Row(row =>
        //        {
        //            // Left: Logo and Company Info
        //            row.ConstantItem(280).Row(leftRow =>
        //            {
        //                // Logo
        //                leftRow.ConstantItem(80).Height(80).Image(logoPath, ImageScaling.FitArea);
        //                leftRow.ConstantItem(10);

        //                // Company Info
        //                leftRow.RelativeItem().Column(companyCol =>
        //                {
        //                    companyCol.Item().Text(invoice.CompanyName).Bold().FontSize(16).FontColor(Colors.Teal.Darken2);
        //                    companyCol.Item().Text(invoice.CompanyAddr_Street).FontSize(10);
        //                    companyCol.Item().Text($"{invoice.CompanyAddr_City}, {invoice.CompanyAddr_StateProvince}. {invoice.CompanyAddr_ZipPinCode}").FontSize(10);
        //                    companyCol.Item().Text($"Tax Reg No:- {invoice.TaxRegistrationNumber}").FontSize(10);
        //                });
        //            });

        //            // Right: INVOICE title
        //            row.RelativeItem().AlignRight().Column(rightCol =>
        //            {
        //                rightCol.Item().Padding(10).AlignCenter()
        //                    .Text("INVOICE").Bold().FontSize(24).FontColor(Colors.Teal.Darken2);
        //            });
        //        });

        //        // Second row with invoice details and terms box
        //        header.Item().PaddingTop(15).Row(row =>
        //        {
        //            // Left: Invoice details
        //            row.ConstantItem(280).Column(leftCol =>
        //            {
        //                leftCol.Item().Text(text =>
        //                {
        //                    text.Span("DATE: ").Bold().FontSize(10);
        //                    text.Span(invoice.InvoiceDate.ToString("MMMM dd, yyyy")).FontSize(10);
        //                });
        //                leftCol.Item().Text(text =>
        //                {
        //                    text.Span("INVOICE #: ").Bold().FontSize(10);
        //                    text.Span(invoice.InvoiceNumber.ToString()).FontSize(10);
        //                });
        //            });

        //            // Right: Terms and Due Date box
        //            row.RelativeItem().AlignRight().Border(1).BorderColor(Colors.Grey.Darken1).Column(termsBox =>
        //            {
        //                termsBox.Item().Background(Colors.Teal.Darken2).Padding(5).Row(termsHeader =>
        //                {
        //                    termsHeader.ConstantItem(80).AlignCenter().Text("Terms").Bold().FontColor(Colors.White).FontSize(10);
        //                    termsHeader.RelativeItem().AlignCenter().Text("Due Date").Bold().FontColor(Colors.White).FontSize(10);
        //                });

        //                termsBox.Item().Padding(5).Row(termsData =>
        //                {
        //                    termsData.ConstantItem(80).AlignCenter().Text(invoice.CustomerPaymentTerm.ToString()).FontSize(10);
        //                    termsData.RelativeItem().AlignCenter().Text(invoice.DueDate?.ToString("dd/MM/yyyy") ?? "N/A").FontSize(10);
        //                });
        //            });
        //        });
        //    });
        //}
        //private static void ComposeHeader(IContainer container, string logoPath, InvoiceVM invoice)
        //{
        //    container.Column(header =>
        //    {
        //        // Top section with logo, company info, and invoice title with details
        //        header.Item().Row(row =>
        //        {
        //            // Left: Logo and Company Info
        //            row.ConstantItem(320).Row(leftRow =>
        //            {
        //                // Logo
        //                leftRow.ConstantItem(80).Height(80).Image(logoPath, ImageScaling.FitArea);
        //                leftRow.ConstantItem(10);

        //                // Company Info
        //                leftRow.RelativeItem().Column(companyCol =>
        //                {
        //                    companyCol.Item().Text(invoice.CompanyName).Bold().FontSize(16).FontColor(Colors.Teal.Darken2);
        //                    companyCol.Item().Text(invoice.CompanyAddr_Street).FontSize(10);
        //                    companyCol.Item().Text($"{invoice.CompanyAddr_City}, {invoice.CompanyAddr_StateProvince}. {invoice.CompanyAddr_ZipPinCode}").FontSize(10);
        //                    companyCol.Item().Text($"Tax Reg No:- {invoice.TaxRegistrationNumber}").FontSize(10);
        //                });
        //            });

        //            // Right: INVOICE title with date and number
        //            row.RelativeItem().AlignRight().Column(invoiceCol =>
        //            {
        //                // INVOICE title
        //                invoiceCol.Item().AlignCenter()
        //                    .Text("INVOICE").Bold().FontSize(24).FontColor(Colors.Teal.Darken2);

        //                // Invoice details under the title
        //                invoiceCol.Item().PaddingTop(10).Column(detailsCol =>
        //                {
        //                    detailsCol.Item().Row(dateRow =>
        //                    {
        //                        dateRow.ConstantItem(80).AlignRight().Text("DATE:").Bold().FontSize(10);
        //                        dateRow.RelativeItem().PaddingLeft(5).Text(invoice.InvoiceDate.ToString("MMMM dd, yyyy")).FontSize(10);
        //                    });

        //                    detailsCol.Item().PaddingTop(2).Row(numberRow =>
        //                    {
        //                        numberRow.ConstantItem(80).AlignRight().Text("INVOICE #:").Bold().FontSize(10);
        //                        numberRow.RelativeItem().PaddingLeft(5).Text(invoice.InvoiceNumber.ToString()).FontSize(10);
        //                    });
        //                });
        //            });
        //        });

        //        // Second row with terms box only
        //        header.Item().PaddingTop(15).Row(row =>
        //        {
        //            // Empty left space to balance the layout
        //            row.ConstantItem(320);

        //            // Right: Terms and Due Date box
        //            row.RelativeItem().AlignRight().Border(1).BorderColor(Colors.Grey.Darken1).Column(termsBox =>
        //            {
        //                termsBox.Item().Background(Colors.Teal.Darken2).Padding(5).Row(termsHeader =>
        //                {
        //                    termsHeader.ConstantItem(80).AlignCenter().Text("Terms").Bold().FontColor(Colors.White).FontSize(10);
        //                    termsHeader.RelativeItem().AlignCenter().Text("Due Date").Bold().FontColor(Colors.White).FontSize(10);
        //                });

        //                termsBox.Item().Padding(5).Row(termsData =>
        //                {
        //                    termsData.ConstantItem(80).AlignCenter().Text(invoice.CustomerPaymentTerm.ToString()).FontSize(10);
        //                    termsData.RelativeItem().AlignCenter().Text(invoice.DueDate?.ToString("dd/MM/yyyy") ?? "N/A").FontSize(10);
        //                });
        //            });
        //        });
        //    });
        //}
        //private static void ComposeContent(IContainer container, InvoiceVM invoice, (float TotalHST, float TotalFuelSurcharge, float Subtotal, float GrandTotal) totals)
        //{
        //    container.Column(content =>
        //    {
        //        // Bill To section
        //        content.Item().PaddingTop(20).Border(1).BorderColor(Colors.Grey.Darken1).Column(billTo =>
        //        {
        //            billTo.Item().Background(Colors.Teal.Darken2).Padding(5)
        //                .Text("Bill To:").Bold().FontColor(Colors.White).FontSize(10);

        //            billTo.Item().Padding(8).Column(billToContent =>
        //            {
        //                billToContent.Item().Text(invoice.CustomerName).Bold().FontSize(11);
        //                billToContent.Item().Text(invoice.CustBillToAddr_Street).FontSize(10);
        //                billToContent.Item().Text($"{invoice.CustBillToAddr_City}, {invoice.CustBillToAddr_StateProvince}, {invoice.CustBillToAddr_ZipPinCode}").FontSize(10);
        //            });
        //        });

        //        content.Item().PaddingTop(15);

        //        // Determine visible columns
        //        var columnSettings = DetermineVisibleColumns(invoice.InvoiceItems);

        //        // Create main table
        //        content.Item().Border(1).BorderColor(Colors.Grey.Darken1).Column(table =>
        //        {
        //            // Table header
        //            ComposeTableHeader(table, columnSettings);

        //            // Table rows
        //            ComposeTableRows(table, invoice.InvoiceItems, columnSettings);
        //        });

        //        // Totals section
        //        ComposeTotalsSection(content, totals, columnSettings.HasHST, columnSettings.HasFuel);

        //        // Notes section
        //        if (!string.IsNullOrWhiteSpace(invoice.Notes))
        //        {
        //            content.Item().PaddingTop(20).Border(1).BorderColor(Colors.Grey.Darken1).Column(notes =>
        //            {
        //                notes.Item().Background(Colors.Teal.Darken2).Padding(5)
        //                    .Text("NOTES:").Bold().FontColor(Colors.White).FontSize(10);

        //                notes.Item().Padding(8).Text(invoice.Notes).FontSize(10).WrapAnywhere();
        //            });
        //        }
        //    });
        //}
        private static void ComposeHeader(IContainer container, string logoPath, InvoiceVM invoice)
        {
            container.Column(header =>
            {
                // Top section with logo, company info, and invoice title with details
                header.Item().Row(row =>
                {
                    // Left: Logo and Company Info
                    row.ConstantItem(320).Row(leftRow =>
                    {
                        // Logo
                        leftRow.ConstantItem(80).Height(80).Image(logoPath, ImageScaling.FitArea);
                        leftRow.ConstantItem(10);

                        // Company Info
                        leftRow.RelativeItem().Column(companyCol =>
                        {
                            companyCol.Item().Text(invoice.CompanyName).Bold().FontSize(16).FontColor(Colors.Teal.Darken2);
                            companyCol.Item().Text(invoice.CompanyAddr_Street).FontSize(10);
                            companyCol.Item().Text($"{invoice.CompanyAddr_City}, {invoice.CompanyAddr_StateProvince}. {invoice.CompanyAddr_ZipPinCode}").FontSize(10);
                            companyCol.Item().Text($"Tax Reg No:- {invoice.TaxRegistrationNumber}").FontSize(10);
                        });
                    });

                    // Right: INVOICE title with date and number
                    row.RelativeItem().AlignRight().Column(invoiceCol =>
                    {
                        // INVOICE title
                        invoiceCol.Item().AlignCenter()
                            .Text("INVOICE").Bold().FontSize(24).FontColor(Colors.Teal.Darken2);

                        // Invoice details under the title
                        invoiceCol.Item().PaddingTop(10).Column(detailsCol =>
                        {
                            detailsCol.Item().Row(dateRow =>
                            {
                                dateRow.ConstantItem(80).AlignRight().Text("DATE:").Bold().FontSize(10);
                                dateRow.RelativeItem().PaddingLeft(5).Text(invoice.InvoiceDate.ToString("MMMM dd, yyyy")).FontSize(10);
                            });

                            detailsCol.Item().PaddingTop(2).Row(numberRow =>
                            {
                                numberRow.ConstantItem(80).AlignRight().Text("INVOICE #:").Bold().FontSize(10);
                                numberRow.RelativeItem().PaddingLeft(5).Text(invoice.InvoiceNumber.ToString()).FontSize(10);
                            });
                        });
                    });
                });

                // Second row with Bill To and Terms/Due Date aligned horizontally
                header.Item().PaddingTop(20).Row(row =>
                {
                    // Left: Bill To section
                    row.RelativeItem().Border(1).BorderColor(Colors.Grey.Darken1).Column(billTo =>
                    {
                        billTo.Item().Background(Colors.Teal.Darken2).Padding(5)
                            .Text("Bill To:").Bold().FontColor(Colors.White).FontSize(10);

                        billTo.Item().Padding(8).Column(billToContent =>
                        {
                            billToContent.Item().Text(invoice.CustomerName ?? "").Bold().FontSize(11);
                            billToContent.Item().Text(invoice.CustBillToAddr_Street ?? "").FontSize(10);
                            billToContent.Item().Text($"{invoice.CustBillToAddr_City ?? ""}, {invoice.CustBillToAddr_StateProvince ?? ""}, {invoice.CustBillToAddr_ZipPinCode ?? ""}").FontSize(10);
                        });
                    });

                    // Spacing between sections
                    row.ConstantItem(15);

                    // Right: Terms and Due Date box
                    row.ConstantItem(200).Border(1).BorderColor(Colors.Grey.Darken1).Column(termsBox =>
                    {
                        termsBox.Item().Background(Colors.Teal.Darken2).Padding(5).Row(termsHeader =>
                        {
                            termsHeader.ConstantItem(80).AlignCenter().Text("Terms").Bold().FontColor(Colors.White).FontSize(10);
                            termsHeader.RelativeItem().AlignCenter().Text("Due Date").Bold().FontColor(Colors.White).FontSize(10);
                        });

                        termsBox.Item().Padding(5).Row(termsData =>
                        {
                            termsData.ConstantItem(80).AlignCenter().Text(invoice.CustomerPaymentTerm.ToString()).FontSize(10);
                            termsData.RelativeItem().AlignCenter().Text(invoice.DueDate?.ToString("dd/MM/yyyy") ?? "N/A").FontSize(10);
                        });
                    });
                });
            });
        }
        private static void ComposeContent(IContainer container, InvoiceVM invoice, (float TotalHST, float TotalFuelSurcharge, float Subtotal, float GrandTotal) totals)
        {
            container.Column(content =>
            {
                // Determine visible columns
                var columnSettings = DetermineVisibleColumns(invoice.InvoiceItems);

                // Create main table
                content.Item().Border(1).BorderColor(Colors.Grey.Darken1).Column(table =>
                {
                    // Table header
                    ComposeTableHeader(table, columnSettings);

                    // Table rows
                    ComposeTableRows(table, invoice.InvoiceItems, columnSettings);
                });

                // Totals section
                ComposeTotalsSection(content, totals, columnSettings.HasHST, columnSettings.HasFuel);

                // Notes section
                if (!string.IsNullOrWhiteSpace(invoice.Notes))
                {
                    content.Item().PaddingTop(20).Border(1).BorderColor(Colors.Grey.Darken1).Column(notes =>
                    {
                        notes.Item().Background(Colors.Teal.Darken2).Padding(5)
                            .Text("NOTES:").Bold().FontColor(Colors.White).FontSize(10);

                        notes.Item().Padding(8).Text(invoice.Notes).FontSize(10).WrapAnywhere();
                    });
                }
            });
        }

        private static (List<(string Key, int Width)> Columns, bool HasHST, bool HasFuel) DetermineVisibleColumns(IEnumerable<InvoiceItemVM> items)
        {
            // Fixed column widths to match the target design
            var columnWidths = new Dictionary<string, int>
            {
                ["Date"] = 70,
                ["BillNo"] = 70,
                ["RefNo"] = 70,
                ["Description"] = 200,
                ["Rate"] = 70
            };

            bool hasBillNo = items.Any(i => !string.IsNullOrWhiteSpace(i.BillNumber));
            bool hasDate = items.Any(i => i.ItemReferenceDate != null);
            bool hasRef = items.Any(i => !string.IsNullOrWhiteSpace(i.Reference));
            bool hasHST = items.Any(i => i.HST > 0);
            bool hasFuel = items.Any(i => i.FuelSurcharge > 0);

            var columnsToShow = new List<(string Key, int Width)>();

            if (hasDate) columnsToShow.Add(("Date", columnWidths["Date"]));
            if (hasBillNo) columnsToShow.Add(("BillNo", columnWidths["BillNo"]));
            if (hasRef) columnsToShow.Add(("RefNo", columnWidths["RefNo"]));
            columnsToShow.Add(("Description", columnWidths["Description"]));
            columnsToShow.Add(("Rate", columnWidths["Rate"]));

            return (columnsToShow, hasHST, hasFuel);
        }

        private static void ComposeTableHeader(ColumnDescriptor content, (List<(string Key, int Width)> Columns, bool HasHST, bool HasFuel) columnSettings)
        {
            content.Item().Background(Colors.Teal.Darken2).Border(1).BorderColor(Colors.Grey.Darken1)
                .PaddingVertical(8).PaddingHorizontal(5)
                .Row(row =>
                {
                    foreach (var col in columnSettings.Columns)
                    {
                        row.ConstantItem(col.Width).Element(cell =>
                        {
                            var aligned = col.Key == "Rate" ? cell.AlignRight() : cell.AlignCenter();
                            aligned.Text(GetHeaderLabel(col.Key)).Bold().FontColor(Colors.White).FontSize(10);
                        });
                    }
                });
        }

        private static void ComposeTableRows(ColumnDescriptor content, IEnumerable<InvoiceItemVM> items, (List<(string Key, int Width)> Columns, bool HasHST, bool HasFuel) columnSettings)
        {
            var itemsList = items.ToList();

            // Add actual items
            for (int i = 0; i < itemsList.Count; i++)
            {
                var item = itemsList[i];
                var backgroundColor = i % 2 == 0 ? Colors.White : Colors.Grey.Lighten4;

                content.Item().Background(backgroundColor).Border(1).BorderColor(Colors.Grey.Darken1)
                    .PaddingVertical(6).PaddingHorizontal(5)
                    .Row(row =>
                    {
                        foreach (var col in columnSettings.Columns)
                        {
                            string value = GetColumnValue(col.Key, item);

                            row.ConstantItem(col.Width).Element(cell =>
                            {
                                var aligned = col.Key == "Rate" ? cell.AlignRight() :
                                             col.Key == "Description" ? cell.AlignLeft() : cell.AlignCenter();
                                aligned.Text(value).FontSize(9);
                            });
                        }
                    });
            }

            // Add empty rows to make it look more spacious (minimum 10 rows total)
            int totalRows = Math.Max(10, itemsList.Count);
            for (int i = itemsList.Count; i < totalRows; i++)
            {
                var backgroundColor = i % 2 == 0 ? Colors.White : Colors.Grey.Lighten4;

                content.Item().Background(backgroundColor).Border(1).BorderColor(Colors.Grey.Darken1)
                    .PaddingVertical(6).PaddingHorizontal(5)
                    .Row(row =>
                    {
                        foreach (var col in columnSettings.Columns)
                        {
                            row.ConstantItem(col.Width).Text("");
                        }
                    });
            }
        }

        private static void ComposeTotalsSection(ColumnDescriptor content, (float TotalHST, float TotalFuelSurcharge, float Subtotal, float GrandTotal) totals, bool hasHST, bool hasFuel)
        {
            content.Item().PaddingTop(10).AlignRight().Column(col =>
            {
                // Calculate HST percentage (assuming 13%)
                float hstPercentage = totals.Subtotal > 0 ? (totals.TotalHST / totals.Subtotal) * 100 : 0;
                float fuelPercentage = totals.Subtotal > 0 ? (totals.TotalFuelSurcharge / totals.Subtotal) * 100 : 0;

                // SUBTOTAL
                col.Item().Row(r =>
                {
                    r.ConstantItem(100).AlignRight().Text("SUBTOTAL").Bold().FontSize(11);
                    r.ConstantItem(80).AlignRight().Text($"{totals.Subtotal:F2}").Bold().FontSize(11);
                });

                // HST with percentage
                if (hasHST)
                {
                    col.Item().Row(r =>
                    {
                        r.ConstantItem(60).AlignRight().Text("HST").Bold().FontSize(11);
                        r.ConstantItem(40).AlignRight().Text($"{hstPercentage:F2}%").Bold().FontSize(11);
                        r.ConstantItem(80).AlignRight().Text($"{totals.TotalHST:F2}").Bold().FontSize(11);
                    });
                }

                // Fuel Surcharge with percentage
                if (hasFuel)
                {
                    col.Item().Row(r =>
                    {
                        r.ConstantItem(60).AlignRight().Text("Fuel Sur.").Bold().FontSize(11);
                        r.ConstantItem(40).AlignRight().Text($"{fuelPercentage:F2}%").Bold().FontSize(11);
                        r.ConstantItem(80).AlignRight().Text($"{totals.TotalFuelSurcharge:F2}").Bold().FontSize(11);
                    });
                }

                // TOTAL DUE
                col.Item().PaddingTop(5).Background(Colors.Teal.Darken2).Padding(5).Row(r =>
                {
                    r.ConstantItem(100).AlignRight().Text("TOTAL DUE").Bold().FontColor(Colors.White).FontSize(12);
                    r.ConstantItem(80).AlignRight().Text($"{totals.GrandTotal:F2}").Bold().FontColor(Colors.White).FontSize(12);
                });
            });
        }

        private static string GetColumnValue(string columnKey, InvoiceItemVM item)
        {
            return columnKey switch
            {
                "Date" => item.ItemReferenceDate?.ToString("dd-MMM-yy") ?? "",
                "BillNo" => item.BillNumber ?? "",
                "RefNo" => item.Reference ?? "",
                "Description" => item.Description ?? "",
                "Rate" => item.UnitPrice?.ToString("F2") ?? "0.00", // Fix: Use null-conditional operator and provide a default value
                _ => ""
            };
        }

        private static string GetHeaderLabel(string key) => key switch
        {
            "Date" => "Date",
            "BillNo" => "Bill No",
            "RefNo" => "Ref No",
            "Description" => "Description",
            "Rate" => "Rate",
            _ => key
        };

        public static FileContentResult GeneratePdfAsResult(string logoPath, InvoiceVM order)
        {
            var document = CreateInvoiceDocument(logoPath, order);
            using var stream = new MemoryStream();
            document.GeneratePdf(stream);
            stream.Position = 0;
            return new FileContentResult(stream.ToArray(), "application/pdf")
            {
                FileDownloadName = $"Invoice-{order.Id}.pdf"
            };
        }
    }
}